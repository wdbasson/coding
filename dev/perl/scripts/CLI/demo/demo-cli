#!/usr/bin/perl -w 

use strict;
use warnings;

use lib 'lib';

# ---- EXECUTION ----
CLIF::Demo->run(); # Launch command

###################################

# ---- APPLICATION ----
package CLIF::Demo;
use base qw( CLI::Framework );

use strict;
use warnings;
use lib "$ENV{HOME}/must/projects/coding/dev/perl/lib";
use MuST::DictAnalysis::Preproc;
use open IO => ':encoding(utf8)';    # declare default layers utf8
use open ':std';    # converts the standard filehandles (STDIN, STDOUT,
                    # STDERR) to comply with encoding selected for
                    # input/output handles

sub usage_text {
# The usage_text() hook in the Application Class is meant to return a
# usage string describing the whole application.
# wdb: Annoyingly this specific usage_text() hook pads the whole string with whitespace...
qq{$0 [--verbose|v] [--help|h] <subcommand>:

OPTIONS:
    --verbose -v:   be vebose
    --help    -h:   show help

ARGUMENTS (subcommands):
    sortunique|su:  sort unique input
    sortany|s:      sort input
    uppercase|uc:   convert to uppercase
    lowercase|lc:   convert to lowercase
    randomize|r:    randomize input
}
}

sub option_spec {
    # The option_spec() hook in the Application class provides the option
    # specification for the whole application.
    [ 'help|h'      => 'show help' ],
    [ 'verbose|v'   => 'be verbose' ],
}

sub validate_options {
    # The validate_options() hook can be used to ensure that the application
    # options are valid.
    my ($self, $opts) = @_;

    # ...nothing to check for this application
}

sub command_map {
    # In this *list*, the command names given as keys will be bound to the
    # command classes given as values.  This will be used by CLIF as a hash
    # initializer and the command_map_hashref() method will be provided to
    # return a hash created from this list for convenience.
    'sortunique'    => 'My::Preproc::Command::SortUnique',
    'sort'          => 'My::Preproc::Command::SortAny',
    'uppercase'     => 'My::Preproc::Command::Uppercase',
    'lowercase'     => 'My::Preproc::Command::Lowercase',
    'randomize'     => 'My::Preproc::Command::Randomize',
}

sub command_alias {
    # In this list, the keys are aliases to the command names given as values
    # (the values should be found as "keys" in command_map()).
    su  => 'sortunique',
    s   => 'sort',
    uc  => 'uppercase',
    lc  => 'lowercase',
    r   => 'randomize',
}


sub init {
    # This initialization is performed once for the application (default
    # behavior).
    my ($self, $opts) = @_;

    # wdb: subroutines can't be both methods (OO) and functions (Export)
    #my $preproc = MuST::DictAnalysis::Preproc->new();
    # Store model object in shared cache...
    #$self->cache->set( 'preproc' => $preproc );
}


# ---- COMMAND ----
package My::Preproc::Command::SortUnique;
use base qw( CLI::Framework::Command );

use strict;
use warnings;

sub usage_text {
    # The usage_text() hook in a Command Class is meant to return a usage
    # string describing only a particular command.
    q{
    sortunique <stdin> | <file1> [<file2> ... <fileN> ]: creates unique sorted output
        <in:stdin>    text from stdin (eg. cat)
        <in:file>     file(s) containing text
    }
}

sub validate {
    # The Command Class can override the validate() hook to catch invalid
    # command requests prior to run().  If the command request is invalid, the
    # hook should throw an exception with a descriptive error message.
    my ($self, $cmd_opts, @args) = @_;

    if ( -t STDIN and not @ARGV ) {
      die "Usage:" . $self->usage_text() . "\n" unless @args;
    }
}

sub run {
    # Now that the extraneous details have been separated into their own
    # subroutines, run() contains just the "real" program logic.
    my ($self, $opts, @args) = @_;
    my @stdin=<>;

    my @processed=MuST::DictAnalysis::Preproc::sort_unique(@stdin);
    # wdb: subroutines can't be both methods (OO) and functions (Export)
    #my $preproc = $self->cache->get( 'preproc' );
    #my @sorted = $preproc->sort_unique(@stdin);
    my $output;

    # wdb: construct output string
    # if you just return @output white space appears before each value...
    foreach my $val (@processed) {
      $output .= $val;
    }
    return $output;
}

# ---- COMMAND ----
package My::Preproc::Command::SortAny;
use base qw( CLI::Framework::Command );

use strict;
use warnings;

sub usage_text {
    q{
    sort <stdin> | <file1> [<file2> ... <fileN>]: creates sorted output
        <in:stdin>    text from stdin (eg. cat)
        <in:file>     file(s) containing text
    }
}

sub validate {
    my ($self, $cmd_opts, @args) = @_;

    # wdb: check if STDIN filehandle open to TTY and die (happens if command run without arguments or stdin)
    if ( -t STDIN and not @ARGV ) {
      die "Usage:" . $self->usage_text() . "\n" unless @args;
    }
    # copied from http://stackoverflow.com/a/519239
}

sub run {
    my ($self, $opts, @args) = @_;
    my @stdin=<>;

    #my $preproc = $self->cache->get( 'preproc' );
    #my @processed = $preproc->sort_any(@stdin);
    my @processed = MuST::DictAnalysis::Preproc::sort_any(@stdin);
    my $output;

    foreach my $val (@processed) {
      $output .= $val;
    }
    return $output;
}

# ---- COMMAND ----
package My::Preproc::Command::Uppercase;
use base qw( CLI::Framework::Command );

use strict;
use warnings;

sub usage_text {
    q{
    uppercase <STDIN> | <file1> [<file2> ... <fileN>]: creates uppercase output
        <in:stdin>    text from stdin (eg. cat)
        <in:file>     file(s) containing text
    }
}

sub validate {
    my ($self, $cmd_opts, @args) = @_;

    if ( -t STDIN and not @ARGV ) {
      die "Usage:" . $self->usage_text() . "\n" unless @args;
    }
}

sub run {
    my ($self, $opts, @args) = @_;
    my @stdin=<>;
    #my $preproc = $self->cache->get( 'preproc' );
    #my @processed = $preproc->uppercase(@stdin);
    my @processed = MuST::DictAnalysis::Preproc::uppercase(@stdin);
    my $output;

    foreach my $val (@processed) {
      $output .= $val;
    }
    return $output;
}

# ---- COMMAND ----
package My::Preproc::Command::Lowercase;
use base qw( CLI::Framework::Command );

use strict;
use warnings;

sub usage_text {
    q{
    lowercase <STDIN> | <file1> [<file2> ... <fileN>]: creates lowercase output
        <in:stdin>    text from stdin (eg. cat)
        <in:file>     file(s) containing text
    }
}

sub validate {
    my ($self, $cmd_opts, @args) = @_;

    if ( -t STDIN and not @ARGV ) {
      die "Usage:" . $self->usage_text() . "\n" unless @args;
    }
}

sub run {
    my ($self, $opts, @args) = @_;
    my @stdin=<>;

    my @processed = MuST::DictAnalysis::Preproc::uppercase(@stdin);
    my $output;

    foreach my $val (@processed) {
      $output .= $val;
    }
    return $output;
}


# ---- COMMAND ----
package My::Preproc::Command::Randomize;
use base qw( CLI::Framework::Command );

use strict;
use warnings;

sub usage_text {
    q{  randomize [--seed=<value>] <STDIN> | <file1> [<file2> ... <fileN>]: creates randomized output
        <in:stdin>    text from stdin (eg. cat)
        <in:file>     file(s) containing text

        OPTIONS
            --seed: specify a seed value
    }
}

sub validate {
    my ($self, $cmd_opts, @args) = @_;

    if ( -t STDIN and not @ARGV ) {
      die "Usage:" . $self->usage_text() . "\n" unless @args;
    }
}

sub option_spec {
    # The option_spec() hook in the Command Class provides the option
    # specification for a particular command.
    [ 'seed=i'   => 'randomize according to seed value'  ],
}

sub run {
    my ($self, $opts, @args) = @_;
    my @stdin=<>;
    my $seed = $opts->{seed};
    #my $preproc = $self->cache->get( 'preproc' );
    #my @processed = $preproc->randomize(@stdin);
    my @processed = MuST::DictAnalysis::Preproc::randomize($seed, @stdin);
    my $output;

    foreach my $val (@processed) {
      $output .= $val;
    }
    return $output;
}

__END__

=pod

=head1 PURPOSE

Demonstration of a very simple CLIF application.

=cut
